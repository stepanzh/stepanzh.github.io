SSH по верхам для программистов
###############################

:date: 2025-09-27
:slug: ssh-101
:summary: todo
:description: todo
:keywords: todo

.. role:: kbd

.. epigraph:: 

   todo

- ssh clients

- иксы
- TODO: permissions (2025-09-27 by Stepan Zakharov)
- TODO: jupyter (2025-09-27 by Stepan Zakharov)


SSH: что такое и зачем
----------------------
Представьте, что используете телеграмм-бот.
Вы нажали кнопку или отправили ему сообщение, и что-то получаете в ответ.
Под капотом вы посылаете команду, она исполняется, а потом вам присылается ответ.
Важно, что команда исполняется «где-то там», а не на вашем телефоне или компьютере.
Ваше устройство лишь *показывает* результат.
Это типичная ситуация общения по модели «клиент-сервер»: вы (client) просите оказать услугу (service) из списка доступных, а сервер её оказывает.

TODO: Про удалённый доступ (2025-09-27 by Stepan Zakharov)

Компьютерами можно управлять удалённо (от слова «далеко»): то есть, находиться физически в одном месте и посылать команды со своего устройства, а исполняться они будут на другом.
Вы при этом видите, какие команды отправляете, и получаете результат их исполнения.
Например, это может быть телеграм-бот, облачный гейминг, гугл документы (и вообще что-угодно облачное) или умная колонка типа «Алисы».

SSH (он же secure shell, он же «эс-эс-аш») используется для подключения к какому-нибудь компьютеру.
Обычно это сервер

Подключение
-----------
По ssh обычно можно подключиться двумя способами: *по ключу* или *по паролю*.
Подключение по паролю неудобно и менее безопасно.
По-хорошему, оно вовсе должно быть отключено на сервере.

В обоих случаях команда подключения одинакова.

.. code-block:: bash

   ssh pupkin@192.168.0.1

Саму команду можно прочитать так: «подключиться к аккаунту :code:`pupkin` на сервере с адресом :code:`192.168.0.1`».
И имя аккаунта, и адрес сервера вам должен кто-то дать.

После команды вы увидите сообщение типа «добавить ли сервер в список и подключиться», тут жмём да (:code:`y`, yes).
Потом возможно несколько ситуаций.

1. Просят пароль: вводите пароль от аккаунта :code:`pupkin` на сервере.
2. :code:`No matching key exchange found`.
   Это хорошо, доступ по паролю закрыт, просто у вас ещё не сгенерирован ключ.
   Об этом позже.
3. Просто подключаетесь: вы увидите приветствие и промпт командной оболочки, например, :code:`$ pupkin@super-server:~`.
   Похоже, вы уже настроили подключение по ключу.
   Вы внутри.

TODO: ссылка на статью про command line 101 (2025-09-27 by Stepan Zakharov)

После первого успешного подключения у вас ещё появится файл :code:`~/.ssh/known_hosts`.
Это список серверов и их ключей/подписей.
По ним ваш ssh клиент проверяет подлинность входящих сообщений.

Ключи
-----
В протоколе SSH для шифрования трафика используются ключи.
Ваш пэ-ка использует пару ключей, и сервер использует пару ключей.
Ключи нужны, чтобы подписывать каждое сообщение, которыми два компа обмениваются.
Так они распознают (authenticate) друг друга и, в конце концов, доверяют.
(Вы когда-нибудь просили записать кружок, когда друг попросил скинуть тыщу? Ну вот это оно.)

Чтобы подключаться по ключу, нужно два действия.

1. Создать пару ключей на своей машине.
2. Положить публичный ключ на удалённую машину.

Создаём ключи
=============
Создаются ключи утилитой :code:`ssh-keygen`.

.. code-block:: bash

   ssh-keygen -t ed25519 -C 'pupkin desktop'

- :code:`Enter file in which to save the key`.
  Жмите :kbd:`Enter`, пусть ключи сохраняются в стандартное место.
- :code:`Enter passphrase`.
  Просто жмите :kbd:`Enter`.
- :code:`Enter same passphrase again`.
  :kbd:`Enter`!

Что мы тут ввели?

- :code:`-t ed25519`?
  Используемый алгоритм шифрования.
  Ed25519 рекомендуется в 2025, можете чекнуть, что рекомендует `github <https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent>`_.
  Ну или спросите админа.
- :code:`-C 'pupkin desktop'`.
  Это комментарий для человеков, он помещается в конец файла с публичным ключ.
  Нужен вам, чтобы отличать машины, с которых вы подключаетесь к серверу.
  Нужен админу, что понимать, чей ключ лежит на сервере.

В итоге, в папке :code:`~/.ssh/` появятся два файла.

- :code:`~/.ssh/id_ed25519`.
  Это приватный ключ.
  Его вообще никому нельзя показывать, даже своему терминалу.
  Если у вас скомуниздят приватный ключ, то смогут подключаться от вашего имени.
- :code:`~/.ssh/id_ed25519.pub`.
  А это публичный ключ.
  Можно всем хвастаться его длиной.

.. code-block:: bash

   cat ~/.ssh/id_ed25519.pub
   ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJdD9cOqjBt+TIhWFEk+dNUtx0rsxV9uGE7S6+O1YnU3 pupkin desktop

Заметили комментарий? ☝️

Кладём ключи
============
Чтобы сервер вас узнал (узнал ваш компьютер), нужно покласть ваш *публичный* ключ на сервер.
Это должен делать админ: нужно ему скинуть файл :code:`~/.ssh/id_чё-то-там.pub`.
(И надеяться, что он не покласт на вашу просьбу.)

Но, допустим, что у вас есть доступ по паролю, и вы хотите положить ключ сами.
Тогда вы делаете так.

Закидываете файл с ключом на сервер (scp разберём позже).

.. code-block:: bash

   scp ~/.ssh/id_ed25519.pub pupkin@192.168.0.1:~

Подключаетесь по паролю

.. code-block:: bash

   ssh pupkin@192.168.0.1

Кладёте ключ в :code:`~/.ssh/authorized_keys`

.. code-block:: bash

   # На удалённой машине!

   mkdir -p ~/.ssh
   cat ~/id_ed25519.pub >> ~/.ssh/authorized_keys
   cat ~/.ssh/authorized_keys
   rm ~/id_ed25519.pub

Что произошло?

1. Создали папку :code:`~/.ssh`, если её ещё нет.
2. Дописали публичный ключ в файл :code:`~/.ssh/authorized_keys`.
   Это список ключей, которым сервер доверяет для подключения к аккаунту :code:`pupkin`.
   (Ну или вообще к тому, в чьём хоуме это лежит.)
   В списке может быть много ключей, так вы можете подключаться с разных устройств.
3. Проверили, что ключ записался.
4. Удалили ключ, чтоб больше не мешался.

Готово.

SCP: перекидываем файлы
-----------------------
SCP (secure copy) это утилита для передачи файлов по ssh.
Она обычно устанавливается вместе с ssh клиентом.

Синтаксис команды :code:`scp` мимикрирует под утилиту :code:`cp`.

.. code-block:: bash

   scp ~/documents/some-data.tar pupkin@192.68.0.1:~/temporary/

Так локальный файл :code:`~/documents/some-data.tar` отправляется (копируется) на удалённую машину.
В итоге на сервере появится файл :code:`/home/pupkin/temporary/some-data.tar`.

.. 

   Всё отличие от :code:`cp` только во втором аргументе: прежде чем указать путь, необходимо указать адрес машины и поставить двоеточие.

- После того, как вы ввели :code:`pupkin@192.68.0.1:~/` пожмакайте :kbd:`Tab`.
  По-хорошему, должна сработать подсказка для пути.
- С опцией :code:`-r` вы можете отправлять `целые папки <https://stackoverflow.com/questions/11304895/how-do-i-copy-a-folder-from-remote-to-local-using-scp>`_.

Если вы не используете подключение по ключу, то :code:`scp` будет на каждый чих требовать пароль.
Используйте ключи!

Конфиг для ssh
--------------

.. code-block:: text

   Host mlcluster
     HostName 192.168.0.1
     User pupkin

Некст левел для упрощения жизни после настройки ключей это настройка конфига.
Базовый конфиг вверху, его стандартное место это :code:`~/.ssh/config`.

Теперь дядя pupkin может подключаться к серверу такой командой.

.. code-block:: bash

   ssh mlcluster

А отправлять файлы вот так.

.. code-block:: bash

   scp some-data.tar mlcluster:~/temporary/

Можно считать это shorthand-ом, чтобы не запоминать юзернэйм и адрес сервера.

В конфиге много настроек.
Например, можно указать какой ключ использовать (когда у вас их несколько) или смэтчить настройки клиента и сервера (чтоб не ругались).

TODO: смайлик kolobok загорает (2025-09-28 by Stepan Zakharov)
